generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Saif@1996@localhost:3306/omerald_prod?schema=public"
  // url = "mysql://saifMigration1:Welcome@123@184.168.108.146:3306/omerald_prod?schema=public"
}

model anthropometrics {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  profile_id BigInt    @db.UnsignedBigInt
  date       DateTime  @db.Date
  cm         String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  profiles   profiles  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "anthropometrics_profile_id_foreign")

  @@index([profile_id], map: "anthropometrics_profile_id_foreign")
}

model api_logs {
  al_id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  al_response_code   Int?      @db.UnsignedTinyInt
  al_api_name        String?   @db.VarChar(100)
  al_api_method      String?   @db.VarChar(100)
  al_ip_address      String?   @db.VarChar(100)
  al_request_data    String?   @db.Text
  al_response_data   String?   @db.Text
  al_processing_time Float?
  al_device_type     String?   @db.VarChar(20)
  al_authorized      Int?      @db.UnsignedTinyInt
  al_created_at      DateTime? @db.Timestamp(0)
  al_updated_at      DateTime? @db.Timestamp(0)
  al_deleted_at      DateTime? @db.Timestamp(0)
}

model article_attachments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt    @db.UnsignedBigInt
  file       String
  file_label String?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_attachments_article_id_foreign")

  @@index([article_id], map: "article_attachments_article_id_foreign")
}

model article_comments {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id      BigInt?   @db.UnsignedBigInt
  comment_by_id   BigInt?   @db.UnsignedBigInt
  article_comment String?   @db.Text
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model articles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  writer_id            BigInt                 @db.UnsignedBigInt
  title                String
  slug                 String
  short_description    String?                @db.Text
  description          String?                @db.LongText
  health_topics        String?
  article_comment      String?                @db.Text
  article_ratings      String?
  status               Int                    @default(3) @db.TinyInt
  image                String?
  updated_by           Int?
  approval_date        DateTime?              @db.Timestamp(0)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  users                users                  @relation(fields: [writer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "articles_writer_id_foreign")
  article_attachments  article_attachments[]
  banners              banners[]
  home_page2_articles  home_page2_articles[]
  home_page_1_articles home_page_1_articles[]

  @@index([slug], map: "articles_slug_index")
  @@index([updated_by], map: "articles_updated_by_index")
  @@index([writer_id], map: "articles_writer_id_foreign")
}

model banners {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id    BigInt    @db.UnsignedBigInt
  description   String?
  image         String
  is_web_banner Boolean   @default(false)
  is_app_banner Boolean   @default(false)
  status        Boolean   @default(true)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  articles      articles  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "banners_article_id_foreign")

  @@index([article_id], map: "banners_article_id_foreign")
}

model bmis {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  profile_id BigInt    @db.UnsignedBigInt
  bmi_height String
  bmi_weight String
  bmi_value  String
  bmi_date   DateTime  @db.Date
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  profiles   profiles  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bmis_profile_id_foreign")

  @@index([profile_id], map: "bmis_profile_id_foreign")
}

model cities {
  id       BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name     String
  state_id BigInt? @db.UnsignedBigInt
}

model dose_durations {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  duration   String
  status     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([status], map: "dose_durations_status_index")
}

model doses {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  duration_id BigInt?   @db.UnsignedBigInt
  vaccine_id  BigInt?   @db.UnsignedBigInt
  type        Int       @default(1) @db.TinyInt
  status      Boolean   @default(true)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([status], map: "doses_status_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model health_topics {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title                 String
  slug                  String?
  body                  String?   @db.LongText
  image                 String?
  status                Boolean   @default(false)
  is_major_health_event Boolean   @default(false)
  created_by            Int?
  updated_by            Int?
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)

  @@index([created_by], map: "health_topics_created_by_index")
  @@index([slug], map: "health_topics_slug_index")
  @@index([status], map: "health_topics_status_index")
  @@index([updated_by], map: "health_topics_updated_by_index")
}

model home_page2_articles {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  article_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  articles   articles  @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "home_page2_articles_article_id_foreign")

  @@index([article_id], map: "home_page2_articles_article_id_foreign")
}

model home_page_1 {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String
  description String?   @db.Text
  status      Boolean   @default(true)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model home_page_1_articles {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  home_page_1_id BigInt    @db.UnsignedBigInt
  image          String
  article_id     BigInt    @db.UnsignedBigInt
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
  articles       articles  @relation(fields: [article_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "home_page_1_articles_article_id_foreign")

  @@index([article_id], map: "home_page_1_articles_article_id_foreign")
}

model home_page_2 {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String
  description String?   @db.Text
  status      Boolean   @default(true)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model immutization_schedules {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  profile_id    BigInt    @db.UnsignedBigInt
  vaccine_id    BigInt?   @db.UnsignedBigInt
  schedule_date DateTime  @db.Date
  remark        String
  status        Boolean   @default(false)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  profiles      profiles  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "immutization_schedules_profile_id_foreign")

  @@index([profile_id], map: "immutization_schedules_profile_id_foreign")
  @@index([status], map: "immutization_schedules_status_index")
  @@index([vaccine_id], map: "immutization_schedules_vaccine_id_foreign")
}

model intro_carousel {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title            String
  description      String?   @db.Text
  icon             String?
  background_color String?
  status           Int       @default(1) @db.TinyInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model muac {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  profile_id BigInt    @db.UnsignedBigInt
  muac_value String
  muac_date  DateTime  @db.Date
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  profiles   profiles  @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "muac_profile_id_foreign")

  @@index([profile_id], map: "muac_profile_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model profiles {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt                   @db.UnsignedBigInt
  name                   String
  phone_number           String                   @db.VarChar(15)
  dob                    DateTime                 @db.Date
  gender                 profiles_gender?
  relation               Int?                     @db.TinyInt
  relation_name          String?
  blood_group            profiles_blood_group?
  major_health_events    String?
  diagnosed_conditions   String?
  food_allergies         String?
  profile_photo          String?
  is_pediatric           profiles_is_pediatric?
  is_shared              Int                      @default(2) @db.TinyInt
  status                 Boolean                  @default(true)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "profiles_user_id_foreign")
  anthropometrics        anthropometrics[]
  bmis                   bmis[]
  immutization_schedules immutization_schedules[]
  muac                   muac[]

  @@index([status], map: "profiles_status_index")
  @@index([user_id], map: "profiles_user_id_foreign")
}

model report_files {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  report_id BigInt? @db.UnsignedBigInt
  file_urls String? @db.VarChar(40)
}

model report_types {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String
  description String?   @db.LongText
  image       String?
  status      Boolean   @default(false)
  created_by  Int?
  updated_by  Int?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([created_by], map: "reports_created_by_index")
  @@index([status], map: "reports_status_index")
  @@index([updated_by], map: "reports_updated_by_index")
}

model roles {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  role_key  String
  role_name String
}

model settings {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  s_name     String?   @db.VarChar(150)
  s_key      String?   @db.VarChar(150)
  s_value    String?   @db.Text
  s_type     Int       @default(1) @db.UnsignedInt
  s_extra    String?   @db.Text
  s_status   Int       @default(1) @db.UnsignedTinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model share_profiles {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  sp_doctor_id   BigInt    @db.UnsignedBigInt
  sp_profile_id  BigInt    @db.UnsignedBigInt
  sp_description String?   @db.LongText
  status         Boolean   @default(true)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model share_reports {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  sr_doctor_id   BigInt    @db.UnsignedBigInt
  sr_profile_id  BigInt    @db.UnsignedBigInt
  sr_report_id   BigInt    @db.UnsignedBigInt
  sr_description String?   @db.LongText
  sr_share_name  String
  status         Boolean   @default(true)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model states {
  id         BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  country_id BigInt? @db.UnsignedBigInt
}

model upload_reports {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  profile_id           BigInt    @db.UnsignedBigInt
  report_name          String
  report_description   String?   @db.Text
  report_health_topics String?
  report_date          DateTime? @db.Timestamp(0)
  report_type          BigInt    @db.UnsignedBigInt
  report_remarks       String?   @db.Text
  is_report_shared     Int       @default(2) @db.TinyInt
  status               Int       @default(1) @db.TinyInt
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
}

model users {
  id                 BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  role_id            Int        @default(0)
  current_mode       Int        @default(0) @db.TinyInt
  firebase_uid       String?
  name               String?
  phone_number       String     @unique(map: "users_phone_number_unique") @db.VarChar(15)
  email              String?    @unique(map: "users_email_unique")
  dob                DateTime?  @db.Date
  profile_photo      String?
  biodata            String?
  is_profile_updated Boolean    @default(false)
  email_verified_at  DateTime?  @db.Timestamp(0)
  college            String?    @db.VarChar(150)
  city               BigInt?    @db.UnsignedBigInt
  state              BigInt?    @db.UnsignedBigInt
  health_topics      String?
  password           String?
  auth_token         String?
  remember_token     String?    @db.VarChar(100)
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  deleted_at         DateTime?  @db.Timestamp(0)
  articles           articles[]
  profiles           profiles[]

  @@index([role_id], map: "users_role_id_index")
}

model vaccines {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  status     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([status], map: "vaccines_status_index")
}

enum profiles_gender {
  Male
  Female
  Other
}

enum profiles_blood_group {
  Op_ @map("O+")
  On_ @map("O-")
  Ap_ @map("A+")
  An_ @map("A-")
  Bp_ @map("B+")
  Bn_ @map("B-")
  ABp_ @map("AB+")
  ABn_ @map("AB-")
}

enum profiles_is_pediatric {
  Yes
  No
}

